<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" minWidth="400" alpha="0.75" backgroundColor="0x333333"
	borderStyle="solid" borderThickness="1" borderColor="0x525252" clipContent="false" horizontalScrollPolicy="off" verticalScrollPolicy="off" addedToStage="init()">

	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.controls.Tree;
			import mx.controls.Alert;
			import tools.Images;
			
			[Bindable]
			private var treeDataCollection:XMLListCollection;
			private var timerExpandTree:Timer;
			private var selectedNode:XML;
			
			// indexed by _SheetName... your sheets better have unique names!
			// when we find the sheet, we can add a region as a child of that sheet item.
			private var sheets:Dictionary = new Dictionary();
			
			// indexed by _SheetName_RegionName... your regions better have unique names within their parent sheet!
			// when we find the region, we can add a handler as a child of that region item
			private var regions:Dictionary = new Dictionary();
			
			public function init():void {
				timerExpandTree = new Timer(500);
				timerExpandTree.addEventListener(TimerEvent.TIMER, timerExpandHandler);
				treeDataCollection = new XMLListCollection();
				paperUITree.dataProvider = treeDataCollection;

				addSheetItem("Bob");
				addSheetItem("Yungin");
				addRegionItem("Regioo", "Bob");
				addHandlerItem("My Handler", "Regioo", "Bob");
				addRegionItem("Reggg", "Yungin");
				addRegionItem("Fuck", "Yungin");
			}

			public function addSheetItem(sheetName:String):void {
				// assume you won't add two sheets with the same name!
				if (sheets[sheetName] != null) {
					return;
				}
				var item:XML = <sheet label={sheetName} nodeType="Sheet"/>;
				sheets[sheetName] = item;
				treeDataCollection.addItem(item);
				timerExpandTree.start();
			}
			
			// we keep a map of sheetNames to XML sheet items... we can append children faster that way
			public function addRegionItem(regionName:String, sheetName:String):void {
				var sheetItem:XML = sheets[sheetName];
				if (sheetItem == null) return;
				var regionItem:XML = <region label={regionName} nodeType="Region"/>;
				regions[sheetName+"_"+regionName] = regionItem;
				sheetItem.appendChild(regionItem);
				timerExpandTree.start();
			}
			
			// we keep a map of sheetName_regionName, and assume that is unique...
			public function addHandlerItem(handlerName:String, regionName:String, sheetName:String):void {
				var regionItem:XML = regions[sheetName+"_"+regionName];
				if (regionItem == null) return;
				regionItem.appendChild(<handler label={handlerName} nodeType="Handler"/>);
				timerExpandTree.start();
			}

			// picks the right icon for the different paper UI components
			public function iconFunction(item:Object):Class {
				// trace("Item: [" + item + "]");
				var xmlNode:XML = item as XML;
				if (xmlNode.@nodeType == "Region") {
					return Images.Region;
				} else if (xmlNode.@nodeType == "Handler") {
					return Images.Handler;
				} else {
					return Images.Sheet;
				}
			}

			public function timerExpandHandler(e:TimerEvent):void {
				timerExpandTree.stop();
				for (var i:int=0; i<treeDataCollection.length; i++) {
					var obj:Object = treeDataCollection.getItemAt(i);
					// trace("expanding item: " + i + " " + obj);
					paperUITree.expandChildrenOf(obj, true);
				}
			}
			
			public function treeChanged(event:Event):void {
				selectedNode = (event.target as Tree).selectedItem as XML;
				trace(selectedNode.@label);
			}
			
			
			
			//
			public function setPenActive(indx:int):void {
				switch(indx) {
					case 1:
						pen1.source = Images.PenActive;
						break;
					case 2:
						pen2.source = Images.PenActive;
						break;
					case 3:
						pen3.source = Images.PenActive;
						break;
					case 4:
						pen4.source = Images.PenActive;
						break;
					default:
					break;					
				}
			}
			public function setPenNotActive(indx:int):void {
				switch(indx) {
					case 1:
						pen1.source = Images.PenInactive;
						break;
					case 2:
						pen2.source = Images.PenInactive;
						break;
					case 3:
						pen3.source = Images.PenInactive;
						break;
					case 4:
						pen4.source = Images.PenInactive;
						break;
					default:
					break;					
				}
			}
			
			public function setCurrentActivePen(indx:int):void {
				currentPen.text = "Pen " + indx;
			}
			
			public function goToLastEditLocation():void {
				
			}
		]]>
	</mx:Script>

		
	<mx:VBox top="10" left="10" width="100%" height="100%" right="10">
		<!-- Image of one or more Pens, with a panel to show pen data as it comes in... //-->
		<mx:HBox top="0" left="0" right="0" width="100%" verticalAlign="top">
			<mx:VBox horizontalAlign="right" verticalAlign="top" verticalGap="0">
				<mx:Label id="currentPen" text="None Active" styleName="detailsText"/>
				<mx:HBox horizontalGap="0" >
					<mx:Image id="pen1" source="{Images.PenInactive}" click="Alert.show('Pen 1 Clicked');" buttonMode="true"/>
					<mx:Image id="pen2" source="{Images.PenInactive}" click="Alert.show('Pen 2 Clicked');" buttonMode="true"/>
					<mx:Image id="pen3" source="{Images.PenInactive}" click="Alert.show('Pen 3 Clicked');" buttonMode="true"/>
					<mx:Image id="pen4" source="{Images.PenInactive}" click="Alert.show('Pen 4 Clicked');" buttonMode="true"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" horizontalAlign="left" verticalGap="0">
				<mx:HBox width="100%">
					<mx:Text styleName="detailsText" id="numStrokesInCurrentState" text="12 strokes"/>
					<mx:Spacer width="70%"/>
					<mx:Text styleName="detailsText" id="currentDuration" text="10 seconds"/>
				</mx:HBox>
				<mx:Canvas backgroundColor="0x000000" width="100%" height="100%" borderThickness="2" borderColor="0x333333" borderStyle="solid" cornerRadius="10"/>
			</mx:VBox>
		</mx:HBox>

		<!-- Tree List of Sheets, Regions, Handlers... to provide quick access //-->
		<mx:Tree id="paperUITree" top="95" left="10" right="10" width="100%" height="100%" 
			labelField="@label" styleName="tree" defaultLeafIcon="{Images.Handler}" 
			iconFunction="iconFunction" change="treeChanged(event);" 
			dataProvider=""/>
		<mx:HBox horizontalGap="0" verticalAlign="middle" width="100%">
			<mx:Label styleName="detailsText" text="Last Edit:"/>
			<mx:VBox>
				<mx:LinkButton id="lastClassAndLocation" label="MapSheet : line 114" click="goToLastEditLocation()"/>
				<mx:LinkButton id="lastMethodSelected" label="gestureHandler()"/>
			</mx:VBox>
			<mx:Label styleName="detailsText" text="Last Typed:"/>
			<mx:Text text='System.out.println("Got Here");' selectable="false" width="105" 
				buttonMode="true" useHandCursor="true" click="goToLastEditLocation()"/>
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>
